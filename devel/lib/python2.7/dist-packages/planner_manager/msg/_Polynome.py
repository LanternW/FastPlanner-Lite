# This Python file uses the following encoding: utf-8
"""autogenerated by genpy from planner_manager/Polynome.msg. Do not edit."""
import codecs
import sys
python3 = True if sys.hexversion > 0x03000000 else False
import genpy
import struct

import genpy
import geometry_msgs.msg

class Polynome(genpy.Message):
  _md5sum = "72bc589b6ca3ee355ef6cb8f666b87fd"
  _type = "planner_manager/Polynome"
  _has_header = False  # flag to mark the presence of a Header object
  _full_text = """int32 car_id

int64 traj_id
time start_time
float64 extra_yaw

geometry_msgs/Point[] pos_pts
geometry_msgs/Vector3 init_v
geometry_msgs/Vector3 init_a
float64[] t_pts

================================================================================
MSG: geometry_msgs/Point
# This contains the position of a point in free space
float64 x
float64 y
float64 z

================================================================================
MSG: geometry_msgs/Vector3
# This represents a vector in free space. 
# It is only meant to represent a direction. Therefore, it does not
# make sense to apply a translation to it (e.g., when applying a 
# generic rigid transformation to a Vector3, tf2 will only apply the
# rotation). If you want your data to be translatable too, use the
# geometry_msgs/Point message instead.

float64 x
float64 y
float64 z"""
  __slots__ = ['car_id','traj_id','start_time','extra_yaw','pos_pts','init_v','init_a','t_pts']
  _slot_types = ['int32','int64','time','float64','geometry_msgs/Point[]','geometry_msgs/Vector3','geometry_msgs/Vector3','float64[]']

  def __init__(self, *args, **kwds):
    """
    Constructor. Any message fields that are implicitly/explicitly
    set to None will be assigned a default value. The recommend
    use is keyword arguments as this is more robust to future message
    changes.  You cannot mix in-order arguments and keyword arguments.

    The available fields are:
       car_id,traj_id,start_time,extra_yaw,pos_pts,init_v,init_a,t_pts

    :param args: complete set of field values, in .msg order
    :param kwds: use keyword arguments corresponding to message field names
    to set specific fields.
    """
    if args or kwds:
      super(Polynome, self).__init__(*args, **kwds)
      # message fields cannot be None, assign default values for those that are
      if self.car_id is None:
        self.car_id = 0
      if self.traj_id is None:
        self.traj_id = 0
      if self.start_time is None:
        self.start_time = genpy.Time()
      if self.extra_yaw is None:
        self.extra_yaw = 0.
      if self.pos_pts is None:
        self.pos_pts = []
      if self.init_v is None:
        self.init_v = geometry_msgs.msg.Vector3()
      if self.init_a is None:
        self.init_a = geometry_msgs.msg.Vector3()
      if self.t_pts is None:
        self.t_pts = []
    else:
      self.car_id = 0
      self.traj_id = 0
      self.start_time = genpy.Time()
      self.extra_yaw = 0.
      self.pos_pts = []
      self.init_v = geometry_msgs.msg.Vector3()
      self.init_a = geometry_msgs.msg.Vector3()
      self.t_pts = []

  def _get_types(self):
    """
    internal API method
    """
    return self._slot_types

  def serialize(self, buff):
    """
    serialize message into buffer
    :param buff: buffer, ``StringIO``
    """
    try:
      _x = self
      buff.write(_get_struct_iq2Id().pack(_x.car_id, _x.traj_id, _x.start_time.secs, _x.start_time.nsecs, _x.extra_yaw))
      length = len(self.pos_pts)
      buff.write(_struct_I.pack(length))
      for val1 in self.pos_pts:
        _x = val1
        buff.write(_get_struct_3d().pack(_x.x, _x.y, _x.z))
      _x = self
      buff.write(_get_struct_6d().pack(_x.init_v.x, _x.init_v.y, _x.init_v.z, _x.init_a.x, _x.init_a.y, _x.init_a.z))
      length = len(self.t_pts)
      buff.write(_struct_I.pack(length))
      pattern = '<%sd'%length
      buff.write(struct.Struct(pattern).pack(*self.t_pts))
    except struct.error as se: self._check_types(struct.error("%s: '%s' when writing '%s'" % (type(se), str(se), str(locals().get('_x', self)))))
    except TypeError as te: self._check_types(ValueError("%s: '%s' when writing '%s'" % (type(te), str(te), str(locals().get('_x', self)))))

  def deserialize(self, str):
    """
    unpack serialized message in str into this message instance
    :param str: byte array of serialized message, ``str``
    """
    if python3:
      codecs.lookup_error("rosmsg").msg_type = self._type
    try:
      if self.start_time is None:
        self.start_time = genpy.Time()
      if self.pos_pts is None:
        self.pos_pts = None
      if self.init_v is None:
        self.init_v = geometry_msgs.msg.Vector3()
      if self.init_a is None:
        self.init_a = geometry_msgs.msg.Vector3()
      end = 0
      _x = self
      start = end
      end += 28
      (_x.car_id, _x.traj_id, _x.start_time.secs, _x.start_time.nsecs, _x.extra_yaw,) = _get_struct_iq2Id().unpack(str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      self.pos_pts = []
      for i in range(0, length):
        val1 = geometry_msgs.msg.Point()
        _x = val1
        start = end
        end += 24
        (_x.x, _x.y, _x.z,) = _get_struct_3d().unpack(str[start:end])
        self.pos_pts.append(val1)
      _x = self
      start = end
      end += 48
      (_x.init_v.x, _x.init_v.y, _x.init_v.z, _x.init_a.x, _x.init_a.y, _x.init_a.z,) = _get_struct_6d().unpack(str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      pattern = '<%sd'%length
      start = end
      s = struct.Struct(pattern)
      end += s.size
      self.t_pts = s.unpack(str[start:end])
      self.start_time.canon()
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e)  # most likely buffer underfill


  def serialize_numpy(self, buff, numpy):
    """
    serialize message with numpy array types into buffer
    :param buff: buffer, ``StringIO``
    :param numpy: numpy python module
    """
    try:
      _x = self
      buff.write(_get_struct_iq2Id().pack(_x.car_id, _x.traj_id, _x.start_time.secs, _x.start_time.nsecs, _x.extra_yaw))
      length = len(self.pos_pts)
      buff.write(_struct_I.pack(length))
      for val1 in self.pos_pts:
        _x = val1
        buff.write(_get_struct_3d().pack(_x.x, _x.y, _x.z))
      _x = self
      buff.write(_get_struct_6d().pack(_x.init_v.x, _x.init_v.y, _x.init_v.z, _x.init_a.x, _x.init_a.y, _x.init_a.z))
      length = len(self.t_pts)
      buff.write(_struct_I.pack(length))
      pattern = '<%sd'%length
      buff.write(self.t_pts.tostring())
    except struct.error as se: self._check_types(struct.error("%s: '%s' when writing '%s'" % (type(se), str(se), str(locals().get('_x', self)))))
    except TypeError as te: self._check_types(ValueError("%s: '%s' when writing '%s'" % (type(te), str(te), str(locals().get('_x', self)))))

  def deserialize_numpy(self, str, numpy):
    """
    unpack serialized message in str into this message instance using numpy for array types
    :param str: byte array of serialized message, ``str``
    :param numpy: numpy python module
    """
    if python3:
      codecs.lookup_error("rosmsg").msg_type = self._type
    try:
      if self.start_time is None:
        self.start_time = genpy.Time()
      if self.pos_pts is None:
        self.pos_pts = None
      if self.init_v is None:
        self.init_v = geometry_msgs.msg.Vector3()
      if self.init_a is None:
        self.init_a = geometry_msgs.msg.Vector3()
      end = 0
      _x = self
      start = end
      end += 28
      (_x.car_id, _x.traj_id, _x.start_time.secs, _x.start_time.nsecs, _x.extra_yaw,) = _get_struct_iq2Id().unpack(str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      self.pos_pts = []
      for i in range(0, length):
        val1 = geometry_msgs.msg.Point()
        _x = val1
        start = end
        end += 24
        (_x.x, _x.y, _x.z,) = _get_struct_3d().unpack(str[start:end])
        self.pos_pts.append(val1)
      _x = self
      start = end
      end += 48
      (_x.init_v.x, _x.init_v.y, _x.init_v.z, _x.init_a.x, _x.init_a.y, _x.init_a.z,) = _get_struct_6d().unpack(str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      pattern = '<%sd'%length
      start = end
      s = struct.Struct(pattern)
      end += s.size
      self.t_pts = numpy.frombuffer(str[start:end], dtype=numpy.float64, count=length)
      self.start_time.canon()
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e)  # most likely buffer underfill

_struct_I = genpy.struct_I
def _get_struct_I():
    global _struct_I
    return _struct_I
_struct_3d = None
def _get_struct_3d():
    global _struct_3d
    if _struct_3d is None:
        _struct_3d = struct.Struct("<3d")
    return _struct_3d
_struct_6d = None
def _get_struct_6d():
    global _struct_6d
    if _struct_6d is None:
        _struct_6d = struct.Struct("<6d")
    return _struct_6d
_struct_iq2Id = None
def _get_struct_iq2Id():
    global _struct_iq2Id
    if _struct_iq2Id is None:
        _struct_iq2Id = struct.Struct("<iq2Id")
    return _struct_iq2Id
