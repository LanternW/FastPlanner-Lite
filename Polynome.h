// Generated by gencpp from file planner_manager/Polynome.msg
// DO NOT EDIT!


#ifndef PLANNER_MANAGER_MESSAGE_POLYNOME_H
#define PLANNER_MANAGER_MESSAGE_POLYNOME_H


#include <string>
#include <vector>
#include <map>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>

#include <geometry_msgs/Point.h>
#include <geometry_msgs/Vector3.h>
#include <geometry_msgs/Vector3.h>

namespace planner_manager
{
template <class ContainerAllocator>
struct Polynome_
{
  typedef Polynome_<ContainerAllocator> Type;

  Polynome_()
    : car_id(0)
    , traj_id(0)
    , start_time()
    , extra_yaw(0.0)
    , pos_pts()
    , init_v()
    , init_a()
    , t_pts()  {
    }
  Polynome_(const ContainerAllocator& _alloc)
    : car_id(0)
    , traj_id(0)
    , start_time()
    , extra_yaw(0.0)
    , pos_pts(_alloc)
    , init_v(_alloc)
    , init_a(_alloc)
    , t_pts(_alloc)  {
  (void)_alloc;
    }



   typedef int32_t _car_id_type;
  _car_id_type car_id;

   typedef int64_t _traj_id_type;
  _traj_id_type traj_id;

   typedef ros::Time _start_time_type;
  _start_time_type start_time;

   typedef double _extra_yaw_type;
  _extra_yaw_type extra_yaw;

   typedef std::vector< ::geometry_msgs::Point_<ContainerAllocator> , typename ContainerAllocator::template rebind< ::geometry_msgs::Point_<ContainerAllocator> >::other >  _pos_pts_type;
  _pos_pts_type pos_pts;

   typedef  ::geometry_msgs::Vector3_<ContainerAllocator>  _init_v_type;
  _init_v_type init_v;

   typedef  ::geometry_msgs::Vector3_<ContainerAllocator>  _init_a_type;
  _init_a_type init_a;

   typedef std::vector<double, typename ContainerAllocator::template rebind<double>::other >  _t_pts_type;
  _t_pts_type t_pts;





  typedef boost::shared_ptr< ::planner_manager::Polynome_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::planner_manager::Polynome_<ContainerAllocator> const> ConstPtr;

}; // struct Polynome_

typedef ::planner_manager::Polynome_<std::allocator<void> > Polynome;

typedef boost::shared_ptr< ::planner_manager::Polynome > PolynomePtr;
typedef boost::shared_ptr< ::planner_manager::Polynome const> PolynomeConstPtr;

// constants requiring out of line definition



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::planner_manager::Polynome_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::planner_manager::Polynome_<ContainerAllocator> >::stream(s, "", v);
return s;
}


template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator==(const ::planner_manager::Polynome_<ContainerAllocator1> & lhs, const ::planner_manager::Polynome_<ContainerAllocator2> & rhs)
{
  return lhs.car_id == rhs.car_id &&
    lhs.traj_id == rhs.traj_id &&
    lhs.start_time == rhs.start_time &&
    lhs.extra_yaw == rhs.extra_yaw &&
    lhs.pos_pts == rhs.pos_pts &&
    lhs.init_v == rhs.init_v &&
    lhs.init_a == rhs.init_a &&
    lhs.t_pts == rhs.t_pts;
}

template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator!=(const ::planner_manager::Polynome_<ContainerAllocator1> & lhs, const ::planner_manager::Polynome_<ContainerAllocator2> & rhs)
{
  return !(lhs == rhs);
}


} // namespace planner_manager

namespace ros
{
namespace message_traits
{





template <class ContainerAllocator>
struct IsFixedSize< ::planner_manager::Polynome_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::planner_manager::Polynome_<ContainerAllocator> const>
  : FalseType
  { };

template <class ContainerAllocator>
struct IsMessage< ::planner_manager::Polynome_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::planner_manager::Polynome_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct HasHeader< ::planner_manager::Polynome_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::planner_manager::Polynome_<ContainerAllocator> const>
  : FalseType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::planner_manager::Polynome_<ContainerAllocator> >
{
  static const char* value()
  {
    return "72bc589b6ca3ee355ef6cb8f666b87fd";
  }

  static const char* value(const ::planner_manager::Polynome_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0x72bc589b6ca3ee35ULL;
  static const uint64_t static_value2 = 0x5ef6cb8f666b87fdULL;
};

template<class ContainerAllocator>
struct DataType< ::planner_manager::Polynome_<ContainerAllocator> >
{
  static const char* value()
  {
    return "planner_manager/Polynome";
  }

  static const char* value(const ::planner_manager::Polynome_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::planner_manager::Polynome_<ContainerAllocator> >
{
  static const char* value()
  {
    return "int32 car_id\n"
"\n"
"int64 traj_id\n"
"time start_time\n"
"float64 extra_yaw\n"
"\n"
"geometry_msgs/Point[] pos_pts\n"
"geometry_msgs/Vector3 init_v\n"
"geometry_msgs/Vector3 init_a\n"
"float64[] t_pts\n"
"\n"
"================================================================================\n"
"MSG: geometry_msgs/Point\n"
"# This contains the position of a point in free space\n"
"float64 x\n"
"float64 y\n"
"float64 z\n"
"\n"
"================================================================================\n"
"MSG: geometry_msgs/Vector3\n"
"# This represents a vector in free space. \n"
"# It is only meant to represent a direction. Therefore, it does not\n"
"# make sense to apply a translation to it (e.g., when applying a \n"
"# generic rigid transformation to a Vector3, tf2 will only apply the\n"
"# rotation). If you want your data to be translatable too, use the\n"
"# geometry_msgs/Point message instead.\n"
"\n"
"float64 x\n"
"float64 y\n"
"float64 z\n"
;
  }

  static const char* value(const ::planner_manager::Polynome_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::planner_manager::Polynome_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.car_id);
      stream.next(m.traj_id);
      stream.next(m.start_time);
      stream.next(m.extra_yaw);
      stream.next(m.pos_pts);
      stream.next(m.init_v);
      stream.next(m.init_a);
      stream.next(m.t_pts);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct Polynome_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::planner_manager::Polynome_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::planner_manager::Polynome_<ContainerAllocator>& v)
  {
    s << indent << "car_id: ";
    Printer<int32_t>::stream(s, indent + "  ", v.car_id);
    s << indent << "traj_id: ";
    Printer<int64_t>::stream(s, indent + "  ", v.traj_id);
    s << indent << "start_time: ";
    Printer<ros::Time>::stream(s, indent + "  ", v.start_time);
    s << indent << "extra_yaw: ";
    Printer<double>::stream(s, indent + "  ", v.extra_yaw);
    s << indent << "pos_pts[]" << std::endl;
    for (size_t i = 0; i < v.pos_pts.size(); ++i)
    {
      s << indent << "  pos_pts[" << i << "]: ";
      s << std::endl;
      s << indent;
      Printer< ::geometry_msgs::Point_<ContainerAllocator> >::stream(s, indent + "    ", v.pos_pts[i]);
    }
    s << indent << "init_v: ";
    s << std::endl;
    Printer< ::geometry_msgs::Vector3_<ContainerAllocator> >::stream(s, indent + "  ", v.init_v);
    s << indent << "init_a: ";
    s << std::endl;
    Printer< ::geometry_msgs::Vector3_<ContainerAllocator> >::stream(s, indent + "  ", v.init_a);
    s << indent << "t_pts[]" << std::endl;
    for (size_t i = 0; i < v.t_pts.size(); ++i)
    {
      s << indent << "  t_pts[" << i << "]: ";
      Printer<double>::stream(s, indent + "  ", v.t_pts[i]);
    }
  }
};

} // namespace message_operations
} // namespace ros

#endif // PLANNER_MANAGER_MESSAGE_POLYNOME_H
